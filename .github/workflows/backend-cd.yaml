name: 'Backend Continuous Deployment'
on:
  push:
    branches:
      - 'main'
    # paths:
      # - 'starter/frontend/**'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: starter/backend
    steps:
      - name: Check out the code to the runner
        uses: actions/checkout@v3

      - name: Install pipenv using pip
        run: pip install pipenv

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: deps-python-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        run: pipenv install --dev

      - name: Test pipenv
        run: pipenv run lint
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: starter/backend
    steps:
      - name: Check out the code to the runner
        uses: actions/checkout@v3

      - name: Install pipenv using pip
        run: pip install pipenv

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: deps-python-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        run: pipenv install --dev

      - name: Test pipenv
        run: pipenv run test
  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: starter/backend
    steps:
    - name: Check out the code to the runner
      uses: actions/checkout@v3

    - name: Install pipenv using pip
      run: pip install pipenv

    - name: Cache dependencies
      id: cache
      uses: actions/cache@v3
      with:
        path: ~/.local/share/virtualenvs
        key: deps-python-${{ hashFiles('**/Pipfile.lock') }}

    - name: Install dependencies
      run: pipenv install --dev

      # - name: Build Docker image
      #   run: docker build --tag mp-backend:${GITHUB_SHA} .

      # - name: Run Docker image
      #   run: docker run -p 5000:5000 --name mp-backend -d mp-backend

      # - name: Check the running application
      #   run: curl http://localhost:5000/movies

      # - name: Stop the application
      #   run: docker stop mp-backend

    - name: Login to ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
        aws-region: us-east-1

    - name: Push image to ECR
      env:
        REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        REPOSITORY: backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Update kube config
      run: aws eks update-kubeconfig --name cluster

    - name: Set image tag to newer version
      run: kustomize edit set image $REPOSITORY=$REGISTRY/$REPOSITORY:$IMAGE_TAG
      env:
        REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        REPOSITORY: backend
        IMAGE_TAG: ${{ github.sha }}
      working-directory: starter/backend/k8s

    - name: Apply the manifests to the cluster
      run: kustomize build | kubectl apply -f -
      working-directory: starter/backend/k8s
